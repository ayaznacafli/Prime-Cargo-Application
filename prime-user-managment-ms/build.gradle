import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.bmuschko.docker-remote-api'
    id 'java'
}

group = 'com.prime-user'
version = ''


allprojects {
    def hash = 'git rev-parse --short HEAD'.execute().text.trim()
    version = "$projectVersion.$hash"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {

    implementation project(":common")
    implementation project(":prime-common-security")

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation "io.springfox:springfox-swagger2:$swaggerVersion"
    implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"

    implementation 'org.liquibase:liquibase-core'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation group: 'org.passay', name: 'passay', version: '1.6.0'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'


    runtimeOnly 'mysql:mysql-connector-java'

    testCompile("junit:junit")
    testCompile 'org.assertj:assertj-core:3.4.1'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}


task dockerFile(type: Dockerfile, dependsOn: assemble) {
    destFile.set(project.file('Dockerfile'))
    from "alpine:$alpineVersion"
    runCommand 'apk add --no-cache openjdk11'
    copyFile "build/libs/${jar.archiveFileName.get()}", '/app/'
    workingDir '/app/'
    entryPoint 'java'
    defaultCommand '-jar', "/app/${jar.archiveFileName.get()}"
}

task dockerBuild(type: DockerBuildImage, dependsOn: dockerFile) {
    inputDir.set(file('.'))
    println("pushing image: $dockerRepoUrl/${project.name}:$version")
    images.add("$dockerRepoUrl/${project.name}:$version")
}


task dockerPush(type: DockerPushImage, dependsOn: dockerBuild) {
    images.add("$dockerRepoUrl/${project.name}:$version")

    registryCredentials.setUsername("$dockerHubUsername")
    registryCredentials.setPassword("$dockerHubPassword")
    registryCredentials.setEmail("$dockerHubEmail")
}

test {
    useJUnitPlatform()
}